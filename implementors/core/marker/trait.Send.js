(function() {var implementors = {};
implementors["aquamarine"] = [{"text":"impl Send for AquamarineBackend","synthetic":true,"types":[]},{"text":"impl Send for AquamarineApi","synthetic":true,"types":[]},{"text":"impl Send for AwaitedParticle","synthetic":true,"types":[]},{"text":"impl Send for AwaitedEffects","synthetic":true,"types":[]},{"text":"impl Send for VmPoolConfig","synthetic":true,"types":[]},{"text":"impl Send for SendParticle","synthetic":true,"types":[]},{"text":"impl Send for StepperEffects","synthetic":true,"types":[]},{"text":"impl Send for Plumber","synthetic":true,"types":[]}];
implementors["connection_pool"] = [{"text":"impl Send for ConnectionPoolInlet","synthetic":true,"types":[]},{"text":"impl Send for ConnectionPoolApi","synthetic":true,"types":[]},{"text":"impl Send for ConnectionPoolBehaviour","synthetic":true,"types":[]},{"text":"impl Send for Contact","synthetic":true,"types":[]},{"text":"impl Send for LifecycleEvent","synthetic":true,"types":[]}];
implementors["fluence_client"] = [{"text":"impl Send for Transport","synthetic":true,"types":[]},{"text":"impl Send for Client","synthetic":true,"types":[]},{"text":"impl Send for ClientCommand","synthetic":true,"types":[]},{"text":"impl Send for ClientEvent","synthetic":true,"types":[]}];
implementors["fluence_libp2p"] = [{"text":"impl Send for RandomPeerId","synthetic":true,"types":[]}];
implementors["host_closure"] = [{"text":"impl Send for Args","synthetic":true,"types":[]},{"text":"impl Send for ArgsError","synthetic":true,"types":[]},{"text":"impl Send for JError","synthetic":true,"types":[]}];
implementors["kademlia"] = [{"text":"impl Send for KademliaApiInlet","synthetic":true,"types":[]},{"text":"impl Send for KademliaApi","synthetic":true,"types":[]},{"text":"impl Send for KademliaConfig","synthetic":true,"types":[]},{"text":"impl Send for Kademlia","synthetic":true,"types":[]},{"text":"impl Send for KademliaError","synthetic":true,"types":[]}];
implementors["particle_closures"] = [{"text":"impl&lt;C&gt; Send for HostClosures&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NodeInfo","synthetic":true,"types":[]}];
implementors["particle_modules"] = [{"text":"impl Send for Blueprint","synthetic":true,"types":[]},{"text":"impl Send for ModuleError","synthetic":true,"types":[]}];
implementors["particle_node"] = [{"text":"impl Send for Node","synthetic":true,"types":[]},{"text":"impl Send for NetworkBehaviour","synthetic":true,"types":[]}];
implementors["particle_protocol"] = [{"text":"impl Send for CompletionChannel","synthetic":true,"types":[]},{"text":"impl Send for HandlerMessage","synthetic":true,"types":[]},{"text":"impl Send for ProtocolConfig","synthetic":true,"types":[]},{"text":"impl Send for Particle","synthetic":true,"types":[]}];
implementors["particle_providers"] = [{"text":"impl Send for Provider","synthetic":true,"types":[]},{"text":"impl Send for ProviderRepository","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ProviderError&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["particle_services"] = [{"text":"impl Send for ParticleAppServices","synthetic":true,"types":[]}];
implementors["server_config"] = [{"text":"impl Send for AppServicesConfig","synthetic":true,"types":[]},{"text":"impl Send for BootstrapConfig","synthetic":true,"types":[]},{"text":"impl Send for FluenceConfig","synthetic":true,"types":[]},{"text":"impl Send for NodeConfig","synthetic":true,"types":[]},{"text":"impl Send for KademliaConfig","synthetic":true,"types":[]},{"text":"impl Send for ListenConfig","synthetic":true,"types":[]},{"text":"impl Send for NetworkConfig","synthetic":true,"types":[]},{"text":"impl Send for ServicesConfig","synthetic":true,"types":[]}];
implementors["test_utils"] = [{"text":"impl Send for ConnectedClient","synthetic":true,"types":[]},{"text":"impl Send for Instruction","synthetic":true,"types":[]},{"text":"impl Send for CreatedSwarm","synthetic":true,"types":[]},{"text":"impl Send for Trust","synthetic":true,"types":[]},{"text":"impl Send for SwarmConfig","synthetic":true,"types":[]},{"text":"impl Send for CreatedService","synthetic":true,"types":[]}];
implementors["waiting_queues"] = [{"text":"impl Send for Enqueued","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for WaitingQueues&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()